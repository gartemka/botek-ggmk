import os
from PIL import Image
from aiogram.types import InputFile, BufferedInputFile, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
import requests
from bs4 import BeautifulSoup
from io import BytesIO
from datetime import datetime, time
import fitz  # PyMuPDF
import json
from . import keyb
import hashlib
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import types

router = Router()
instagramm_GGMK = 'https://www.instagram.com/ggmk.gomel?igsh=MXdwOThlZWlrYWFrZA=='
VK_GGMK = 'https://vk.com/ggmk_club'
Telegram_GGMK = 'https://t.me/ggmk_gomel'
youtube_GGMK = 'https://www.youtube.com/channel/UCtlbFZ3FVvNSj4sIp7cmywA'
COLLEGE_WEBSITE = "http://uoggmk.by/"

IMAGE_DIR = '../UOGGMKBot/app/images'
IMAGE_DIR_CHUNK = '../UOGGMKBot/app/images/raspisane/chunki'

user_state = {}


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.reply(f'–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∫–æ–ª–ª–µ–¥–∂–∞:!\n\n–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º: {instagramm_GGMK}\n\n–í–∫–æ–Ω–∞–∫—Ç–µ: {VK_GGMK}\n\n–¢–µ–ª–µ–≥—Ä–∞–º–º:{Telegram_GGMK}\n\n–Æ—Ç—É–±:{youtube_GGMK}',
                        reply_markup=keyb.main)
    

# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
image_path = os.path.join(IMAGE_DIR, 'prakt.jpg')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∞–∫—Ç–∏–∫"
@router.message(lambda message: message.text == "–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∞–∫—Ç–∏–∫ üìÑ")
async def handle_schedule_practices(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'practice'

    # –ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
    with open(image_path, 'rb') as image_file:
        img_data = image_file.read()  # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_io = BytesIO(img_data)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç BytesIO

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BufferedInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–π—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
        document = BufferedInputFile(file=img_io.getvalue(), filename='prakt.jpg')
        await message.answer_document(document=document, caption="–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∞–∫—Ç–∏–∫ üìÑ")

@router.message(Command('help'))
async def get_help(message: Message):
    await message.answer('–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /help')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
@router.message(lambda message: message.text == '–†–ü-11')
async def handle_group_rp_11(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_0.png')
    await send_group_image(message, image_path, '–†–ü-11')

@router.message(lambda message: message.text == '–†–ü-12')
async def handle_group_rp_12(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_1.png')
    await send_group_image(message, image_path, '–†–ü-12')

@router.message(lambda message: message.text == '–ü–ú-11')
async def handle_group_pm_11(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_2.png')
    await send_group_image(message, image_path, '–ü–ú-11')

@router.message(lambda message: message.text == '–¢–ú-11')
async def handle_group_tm_11(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_3.png')
    await send_group_image(message, image_path, '–¢–ú-11')

@router.message(lambda message: message.text == '–¢–ú-12')
async def handle_group_tm_12(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_4.png')
    await send_group_image(message, image_path, '–¢–ú-12')

@router.message(lambda message: message.text == '–¢–†-11')
async def handle_group_tr_11(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_5.png')
    await send_group_image(message, image_path, '–¢–†-11')

@router.message(lambda message: message.text == '–≠–î-12')
async def handle_group_ed_12(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_6.png')
    await send_group_image(message, image_path, '–≠–î-12')

@router.message(lambda message: message.text == '–ú–ü-11')
async def handle_group_mp_11(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_7.png')
    await send_group_image(message, image_path, '–ú–ü-11')

@router.message(lambda message: message.text == '–¢–°-11')
async def handle_group_ts_11(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_8.png')
    await send_group_image(message, image_path, '–¢–°-11')

@router.message(lambda message: message.text == '–†–ü-21')
async def handle_group_rp_21(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_9.png')
    await send_group_image(message, image_path, '–†–ü-21')

@router.message(lambda message: message.text == '–†–ü-22')
async def handle_group_rp_22(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_10.png')
    await send_group_image(message, image_path, '–†–ü-22')

@router.message(lambda message: message.text == '–ü–ú-21')
async def handle_group_pm_21(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_11.png')
    await send_group_image(message, image_path, '–ü–ú-21')

@router.message(lambda message: message.text == '–¢–ú-21')
async def handle_group_tm_21(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_12.png')
    await send_group_image(message, image_path, '–¢–ú-21')

@router.message(lambda message: message.text == '–¢–ú-201')
async def handle_group_tm_201(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_13.png')
    await send_group_image(message, image_path, '–¢–ú-201')

@router.message(lambda message: message.text == '–≠–î-22')
async def handle_group_ed_22(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_14.png')
    await send_group_image(message, image_path, '–≠–î-22')

@router.message(lambda message: message.text == '–¢–†-21')
async def handle_group_tr_21(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_15.png')
    await send_group_image(message, image_path, '–¢–†-21')

@router.message(lambda message: message.text == '–¢–†-201')
async def handle_group_tr_201(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_16.png')
    await send_group_image(message, image_path, '–¢–†-201')

@router.message(lambda message: message.text == '–ú–ü-21')
async def handle_group_mp_21(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_17.png')
    await send_group_image(message, image_path, '–ú–ü-21')

@router.message(lambda message: message.text == '–¢–°-21')
async def handle_group_ts_21(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_18.png')
    await send_group_image(message, image_path, '–¢–°-21')

@router.message(lambda message: message.text == '–ü–°-201')
async def handle_group_ps_201(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_19.png')
    await send_group_image(message, image_path, '–ü–°-201')

@router.message(lambda message: message.text == '–ü–ö-31')
async def handle_group_pk_31(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_20.png')
    await send_group_image(message, image_path, '–ü–ö-31')

@router.message(lambda message: message.text == '–ü–ö-32')
async def handle_group_pk_32(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_21.png')
    await send_group_image(message, image_path, '–ü–ö-32')

@router.message(lambda message: message.text == '–ü–°–∫-31')
async def handle_group_psk_31(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_22.png')
    await send_group_image(message, image_path, '–ü–°–∫-31')

@router.message(lambda message: message.text == '–¢–û–ú-32')
async def handle_group_tom_32(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_23.png')
    await send_group_image(message, image_path, '–¢–û–ú-32')

@router.message(lambda message: message.text == '–≠–ö-32')
async def handle_group_ek_32(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_24.png')
    await send_group_image(message, image_path, '–≠–ö-32')

@router.message(lambda message: message.text == '–≠–¢-31')
async def handle_group_et_31(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_25.png')
    await send_group_image(message, image_path, '–≠–¢-31')

@router.message(lambda message: message.text == '–¢–û–°-31')
async def handle_group_tos_31(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_26.png')
    await send_group_image(message, image_path, '–¢–û–°-31')

@router.message(lambda message: message.text == '–¢–†-301')
async def handle_group_tr_301(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_27.png')
    await send_group_image(message, image_path, '–¢–†-301')

@router.message(lambda message: message.text == '–ü–°-301')
async def handle_group_ps_301(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_28.png')
    await send_group_image(message, image_path, '–ü–°-301')

@router.message(lambda message: message.text == '–ü–ö-41')
async def handle_group_pk_41(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_29.png')
    await send_group_image(message, image_path, '–ü–ö-41')

@router.message(lambda message: message.text == '–ü–ö-42')
async def handle_group_pk_42(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_30.png')
    await send_group_image(message, image_path, '–ü–ö-42')

@router.message(lambda message: message.text == '–ü–°–∫-41')
async def handle_group_psk_41(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_31.png')
    await send_group_image(message, image_path, '–ü–°–∫-41')

@router.message(lambda message: message.text == '–¢–û–ú-42')
async def handle_group_tom_42(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_32.png')
    await send_group_image(message, image_path, '–¢–û–ú-42')

@router.message(lambda message: message.text == '–¢–û–ú-401')
async def handle_group_tom_401(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_33.png')
    await send_group_image(message, image_path, '–¢–û–ú-401')

@router.message(lambda message: message.text == '–¢–û–°-41')
async def handle_group_tos_41(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_34.png')
    await send_group_image(message, image_path, '–¢–û–°-41')

@router.message(lambda message: message.text == '–¢–û–°-401')
async def handle_group_tos_401(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_35.png')
    await send_group_image(message, image_path, '–¢–û–°-401')

@router.message(lambda message: message.text == '–õ-401')
async def handle_group_l_401(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_36.png')
    await send_group_image(message, image_path, '–õ-401')

@router.message(lambda message: message.text == '–õ–ß–°-401')
async def handle_group_lchs_401(message: Message):
    image_path = os.path.join(IMAGE_DIR_CHUNK, 'chunk_37.png')
    await send_group_image(message, image_path, '–õ–ß–°-401')

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def send_group_image(message, image_path, group_name):
    with open(image_path, 'rb') as image_file:
        img_data = image_file.read()
        img_io = BytesIO(img_data)
        document = BufferedInputFile(file=img_io.getvalue(), filename=f'{group_name}.png')
        await message.answer_document(document=document, caption=f'–ì—Ä—É–ø–ø–∞ {group_name}')


# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç, –∫–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ "—Å–µ–≥–æ–¥–Ω—è" –∏ "–∑–∞–≤—Ç—Ä–∞"
cyclic_switch = False  # False - –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, True - –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 16:00
def toggle_schedule():
    global cyclic_switch
    cyclic_switch = not cyclic_switch  # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()
scheduler.add_job(toggle_schedule, CronTrigger(hour=17))  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 16:00
scheduler.start()
# –ü—Ä–∏–º–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤
schedule = [
    ("1", "8:30 ‚Äî 9:15"),
    ("2", "9:25 ‚Äî 10:10"),
    ("3", "10:20 ‚Äî 11:05"),
    ("4", "11:15 ‚Äî 12:00"),
    ("–û–±–µ–¥", "12:00 ‚Äî 12:30"),
    ("5", "12:30 ‚Äî 13:15"),
    ("6", "13:25 ‚Äî 14:10"),
    ("7", "14:20 ‚Äî 15:05"),
    ("8", "15:15 ‚Äî 16:00"),
    ("9", "16:10 ‚Äî 16:55"),
    ("10", "17:05 ‚Äî 17:50"),
    ("11", "18:00 ‚Äî 18:45"),
    ("12", "18:55 ‚Äî 19:40"),
]

@router.message(F.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ üîî')
async def show_bell_schedule(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'bell_schedule'

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule_text = "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤</b> üìÖ\n\n"
    schedule_text += "<b>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –°—É–±–±–æ—Ç–∞</b>\n\n"
    for lesson, time in schedule:
        schedule_text += f"üîπ <b>–£—Ä–æ–∫ {lesson}</b>: {time}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    await message.answer(schedule_text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@router.message(F.text == '–û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üîî')
async def show_catalog(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'obch_rasp'

    session = requests.Session()
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'
    })

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    response = session.get('http://uoggmk.by/%D1%80%D0%B0%D1%81%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5/')

    # –†–∞–∑–±–∏—Ä–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
    soup = BeautifulSoup(response.content, 'html.parser')

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    items = soup.findAll('div', class_='elementor-image')
    img_urls = []
    for item in items:
        img_tag = item.find('img')
        img_url = img_tag.get('src')
        if img_tag.has_attr('data-src'):
            img_url = img_tag.get('data-src')
        elif img_tag.has_attr('srcset'):
            img_url = img_tag.get('srcset').split(',')[-1].split()[0]
        img_urls.append(img_url)

    save_dir = '../UOGGMKBot/app/images/raspisane/'

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if os.path.exists(save_dir):
        for old_file in os.listdir(save_dir):
            old_file_path = os.path.join(save_dir, old_file)
            if os.path.isfile(old_file_path):
                os.remove(old_file_path)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    def hash_image(image_bytes):
        hasher = hashlib.md5()
        hasher.update(image_bytes)
        return hasher.hexdigest()

    # –•—Ä–∞–Ω–∏–º —Ö–µ—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    image_hashes = []
    modification_times = []

    for idx, img_url in enumerate(img_urls):
        img_data = session.get(img_url).content
        img_io = BytesIO(img_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫
        save_path = os.path.join(save_dir, f'image_{idx}.png')
        with open(save_path, 'wb') as f:
            f.write(img_data)

        # –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_hash = hash_image(img_data)
        image_hashes.append((save_path, img_hash))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è)
        current_time = datetime.now().timestamp()
        os.utime(save_path, (current_time, current_time))

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        modification_datetime = datetime.fromtimestamp(current_time)
        modification_times.append((save_path, modification_datetime))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    modification_times.sort(key=lambda x: x[1])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 5 - —Å—É–±–±–æ—Ç–∞, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    current_day = datetime.now().weekday()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.now().time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    if current_day == 0:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–∑–∂–µ 17:00
        if current_time >= time(17, 0):
            file_name = 'raspisanie_na_zavtra.png'
            await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:")
        else:
            file_name = 'raspisanie_na_subbotu.png'
            await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—É–±–±–æ—Ç—É:")

        with open(image_hashes[0][0], 'rb') as f:
            img_data = f.read()
        img_io = BytesIO(img_data)
        document = BufferedInputFile(file=img_io.getvalue(), filename=file_name)
        await message.answer_document(document=document)

        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
        with open(image_hashes[1][0], 'rb') as f:
            img_data = f.read()
        img_io = BytesIO(img_data)
        document = BufferedInputFile(file=img_io.getvalue(), filename="raspisanie_na_ponedelnik.png")
        await message.answer_document(document=document)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É–±–±–æ—Ç—É
    elif current_day == 5:
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—É–±–±–æ—Ç—É:")
        with open(image_hashes[0][0], 'rb') as f:
            img_data = f.read()
        img_io = BytesIO(img_data)
        document = BufferedInputFile(file=img_io.getvalue(), filename="raspisanie_na_subbotu.png")
        await message.answer_document(document=document)

        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:")
        with open(image_hashes[1][0], 'rb') as f:
            img_data = f.read()
        img_io = BytesIO(img_data)
        document = BufferedInputFile(file=img_io.getvalue(), filename="raspisanie_na_ponedelnik.png")
        await message.answer_document(document=document)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É
    elif current_day == 4:
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—É–±–±–æ—Ç—É:")
        with open(image_hashes[0][0], 'rb') as f:
            img_data = f.read()
        img_io = BytesIO(img_data)
        document = BufferedInputFile(file=img_io.getvalue(), filename="raspisanie_na_subbotu.png")
        await message.answer_document(document=document)

        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:")
        with open(image_hashes[1][0], 'rb') as f:
            img_data = f.read()
        img_io = BytesIO(img_data)
        document = BufferedInputFile(file=img_io.getvalue(), filename="raspisanie_na_ponedelnik.png")
        await message.answer_document(document=document)

    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç cyclic_switch
        if cyclic_switch:
            await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
            with open(image_hashes[1][0], 'rb') as f:
                img_data = f.read()
            img_io = BytesIO(img_data)
            document = BufferedInputFile(file=img_io.getvalue(), filename="raspisanie_na_segodnya.png")
            await message.answer_document(document=document)

            await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:")
            with open(image_hashes[0][0], 'rb') as f:
                img_data = f.read()
            img_io = BytesIO(img_data)
            document = BufferedInputFile(file=img_io.getvalue(), filename="raspisanie_na_zavtra.png")
            await message.answer_document(document=document)
        else:
            await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
            with open(image_hashes[0][0], 'rb') as f:
                img_data = f.read()
            img_io = BytesIO(img_data)
            document = BufferedInputFile(file=img_io.getvalue(), filename="raspisanie_na_segodnya.png")
            await message.answer_document(document=document)

            await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:")
            with open(image_hashes[1][0], 'rb') as f:
                img_data = f.read()
            img_io = BytesIO(img_data)
            document = BufferedInputFile(file=img_io.getvalue(), filename="raspisanie_na_zavtra.png")
            await message.answer_document(document=document)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "1 –∫—É—Ä—Å"
@router.message(F.text == '1 –∫—É—Ä—Å üòé')
async def show_catalog(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'kurs1'
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyb.pervi_kurs_katalog)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£—á–∞—â–∏–º—Å—è üë®üèº‚Äçüéì"
@router.message(F.text == '–£—á–∞—â–∏–º—Å—è üë®üèº‚Äçüéì')
async def show_catalog(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'uchaschimsia'
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyb.uchashimsia)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@router.message(F.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóìÔ∏è')
async def show_catalog(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'menu_raspisanie'
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=keyb.menu_raspisanie)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º"
@router.message(F.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º üóÇ')
async def show_catalog(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'vibor_grupi'
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyb.raspisanie_katalog)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "2 –∫—É—Ä—Å"
@router.message(F.text == '2 –∫—É—Ä—Å üò†')
async def show_catalog(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'kurs2'
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyb.vtoroy_kurs_katalog)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "3 –∫—É—Ä—Å"
@router.message(F.text == '3 –∫—É—Ä—Å üò°')
async def show_catalog(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'kurs3'
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyb.tretiy_kurs_katalog)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "4 –∫—É—Ä—Å"
@router.message(F.text == '4 –∫—É—Ä—Å üòµ')
async def show_catalog(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'kurs4'
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyb.chetvertiy_kurs_katalog)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@router.message(F.text == '–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìñ')
async def show_catalog(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    await message.answer("–ì–æ–º–µ–ª—å—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–ª–ª–µ–¥–∂,\n"
                         "–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –≤ 1955 –≥–æ–¥—É, –∑–∞ –±–æ–ª–µ–µ —á–µ–º 65 –ª–µ—Ç —Å—Ç–∞–ª –æ–¥–Ω–∏–º –∏–∑ –≤–µ–¥—É—â–∏—Ö —É—á–µ–±–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π —Ä–µ–≥–∏–æ–Ω–∞. \n"
                         "–ö–æ–ª–ª–µ–¥–∂ –≥–æ—Ä–¥–∏—Ç—Å—è —Å–≤–æ–∏–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–æ–º –∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞–º–∏,\n"
                         "–∫–æ—Ç–æ—Ä—ã–µ –≤–Ω–µ—Å–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –ë–µ–ª–∞—Ä—É—Å–∏.\n"
                         "\n–°–µ–≥–æ–¥–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–¥–µ—Å—å –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç –±–æ–ª–µ–µ 80 –ø–µ–¥–∞–≥–æ–≥–æ–≤,\n"
                         "—Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞—É–∫, –º–∞–≥–∏—Å—Ç—Ä—ã –∏ –æ—Ç–ª–∏—á–Ω–∏–∫–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.\n"
                         "–ö–æ–ª–ª–µ–¥–∂ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –∞–∫—Ç–∏–≤–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ—Ç —Å\n"
                         "–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è–º–∏ —Ä–µ–≥–∏–æ–Ω–∞ –∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –≤—ã—Å—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –≤–Ω–µ–¥—Ä—è–µ—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ\n"
                         "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫–∏—Ö –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.\n"
                         "\n–ö–æ–ª–ª–µ–¥–∂ –∏–∑–≤–µ—Å—Ç–µ–Ω –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö,\n"
                         "–∞ —Ç–∞–∫–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—É—á–Ω–æ–π –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ-–∫—É–ª—å—Ç—É—Ä–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.\n"
                         "–í—ã–ø—É—Å–∫–Ω–∏–∫–∏ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è—Ö –ë–µ–ª–∞—Ä—É—Å–∏ –∏ –∑–∞ –µ—ë –ø—Ä–µ–¥–µ–ª–∞–º–∏,\n"
                         "–ø—Ä–æ–¥–æ–ª–∂–∞—è —É–∫—Ä–µ–ø–ª—è—Ç—å –¥–æ–±—Ä—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∫–æ–ª–ª–µ–¥–∂–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
@router.message(F.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã üìû')
async def show_contacts(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await message.answer(
        "–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
        "–ü—Ä–∏—ë–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:\n"
        "8 (0232) 50-12-71;\n\n"
        "–ü—Ä–∏—ë–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è:\n"
        "8 (0232) 50-12-73.",
        reply_markup=keyb.settings
    )


@router.message(F.text == '–î–ª—è –æ–ø–ª–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è üí≥')
async def handle_image_info(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'oplat_info'

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyb.oplata_kartinki)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã"
@router.message(F.text == '–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã')
async def handle_image_info(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'image_info'

    # URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    page_url = 'https://drive.google.com/file/d/1rpGBOA1M7rzzMR5T9TzVufnal_exhMHK/view'

    # –ü–æ–ª—É—á–∞–µ–º HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    response = requests.get(page_url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.content, 'html.parser')

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        img_tags = soup.find_all('img')

        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not img_tags:
            await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_url = img_tags[0]['src']
        if not img_url.startswith('http'):
            img_url = requests.compat.urljoin(page_url, img_url)  # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_response = requests.get(img_url)
        if img_response.status_code == 200:
            image_data = BytesIO(img_response.content)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            document = BufferedInputFile(file=image_data.getvalue(), filename="image.jpg")  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ .png
            await message.answer_document(document=document, caption="–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π"
@router.message(F.text == '–û–ø–ª–∞—Ç–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π')
async def handle_image_info(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'image_info'

    # URL –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    img_url = 'https://drive.google.com/uc?export=download&id=1cFM2jJAx6bBMLqQQ8yf7WvgxHV6YVeJR'

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img_response = requests.get(img_url)
    if img_response.status_code == 200:
        image_data = BytesIO(img_response.content)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        document = BufferedInputFile(file=image_data.getvalue(), filename="image.jpg")
        await message.answer_document(document=document, caption="–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

@router.message(F.text == '–û–ø–ª–∞—Ç–∞ –æ–±—â–µ–∂–∏—Ç–∏—è')
async def handle_image_info(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'image_info'

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    img_url = 'https://drive.google.com/uc?export=download&id=1A_7zCdlpyfwLP_WnnE1aV2WRNtIlAoEe'

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img_response = requests.get(img_url)
    if img_response.status_code == 200:
        image_data = BytesIO(img_response.content)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        document = BufferedInputFile(file=image_data.getvalue(), filename="image.jpg")
        await message.answer_document(document=document, caption="–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


@router.message(F.text == '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è')
async def handle_image_info(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'image_info'

    # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ PDF-—Ñ–∞–π–ª
    pdf_url = 'https://drive.google.com/uc?id=1JSkEIS8Qn2_5vQQ2yXEyhBpbRx5NaX1v&export=download'

    # –ó–∞–≥—Ä—É–∂–∞–µ–º PDF-—Ñ–∞–π–ª
    pdf_response = requests.get(pdf_url)
    if pdf_response.status_code == 200:
        pdf_data = pdf_response.content

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF
        pdf_document = fitz.open(stream=pdf_data, filetype="pdf")

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for i in range(len(pdf_document)):
            page = pdf_document.load_page(i)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            pix = page.get_pixmap()  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
            image_data = BytesIO()
            img.save(image_data, format='JPEG')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPEG
            image_data.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç
            document = BufferedInputFile(file=image_data.getvalue(), filename=f"page_{i + 1}.jpg")
            await message.answer_document(document=document, caption=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i + 1}")

    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å PDF-—Ñ–∞–π–ª.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û –∫–æ–ª–ª–µ–¥–∂–µ"
@router.message(F.text == '–û –∫–æ–ª–ª–µ–¥–∂–µ üè®')
async def show_message(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'colleg_katalog'
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyb.colleg_katalog)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è"
@router.message(F.text == '–õ–æ–∫–∞—Ü–∏—è üö©')
async def send_location(message: Message):
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–ª–ª–µ–¥–∂–∞
    latitude = 52.4057356  # –®–∏—Ä–æ—Ç–∞
    longitude = 30.907618  # –î–æ–ª–≥–æ—Ç–∞
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
    await message.answer("–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–µ–ª–∞—Ä—É—Å—å, –∏–Ω–¥. 246027, –≥. –ì–æ–º–µ–ª—å, —É–ª. –û–±—ä–µ–∑–¥–Ω–∞—è, 2.")
    await message.answer_location(latitude=latitude, longitude=longitude)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—â–µ–∂–∏—Ç–∏–µ"
@router.message(F.text == '–û–±—â–µ–∂–∏—Ç–∏–µ üè†')
async def send_location(message: Message):
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–ª–ª–µ–¥–∂–∞
    latitude = 52.407899  # –®–∏—Ä–æ—Ç–∞
    longitude = 30.904875  # –î–æ–ª–≥–æ—Ç–∞
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
    await message.answer("–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–µ–ª–∞—Ä—É—Å—å, –∏–Ω–¥. 246027, –≥. –ì–æ–º–µ–ª—å, —É–ª. –û–±—ä–µ–∑–¥–Ω–∞—è, 4, –∫–æ—Ä–ø—É—Å 2.")
    await message.answer_location(latitude=latitude, longitude=longitude)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
@router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚Ü©')
async def go_back(message: Message):
    user_id = message.from_user.id
    state = user_state.get(user_id, 'main_menu')
    if state == 'vibor_grupi':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_state[user_id] = 'menu_raspisanie'
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=keyb.menu_raspisanie)
    elif state == 'obch_rasp':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_state[user_id] = 'uchashimsia'
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —É—á–∞—â–∏–º—Å—è:", reply_markup=keyb.uchashimsia)
    elif state == 'practice':
        user_state[user_id] = 'uchashimsia'
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —É—á–∞—â–∏–º—Å—è:", reply_markup=keyb.uchashimsia)
    elif state == 'menu_raspisanie':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —É—á–∞—â–∏–º—Å—è
        user_state[user_id] = 'uchashimsia'
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —É—á–∞—â–∏–º—Å—è:", reply_markup=keyb.uchashimsia)
    elif state == 'uchashimsia':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_state[user_id] = 'main_menu'
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyb.main)
    elif state in ['kurs1', 'kurs2', 'kurs3', 'kurs4']:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        user_state[user_id] = 'vibor_grupi'
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º:", reply_markup=keyb.raspisanie_katalog)
    elif state == 'colleg_katalog':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_state[user_id] = 'main_menu'
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyb.main)
    elif state == 'abiturientam':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_state[user_id] = 'main_menu'
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyb.main)
    elif state == 'special':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º
        user_state[user_id] = 'abiturientam'
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –∞–±–∏—Ç—É—Ä–∏–µ—Ç–∞–º:", reply_markup=keyb.abiturientam)
    elif state == 'oplat_info':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º
        user_state[user_id] = 'abiturientam'
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —É—á–∞—â–∏–º—Å—è:", reply_markup=keyb.uchashimsia)
    elif state == 'image_info':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º
        user_state[user_id] = 'abiturientam'
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —É—á–∞—â–∏–º—Å—è:", reply_markup=keyb.uchashimsia)
    elif state in ['MP', 'PC','PM','ED','RP','TR','TM','TC']:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º
        user_state[user_id] = 'abiturientam'
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –∞–±–∏—Ç—É—Ä–∏–µ—Ç–∞–º:", reply_markup=keyb.abiturientam)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_state[user_id] = 'main_menu'
        await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyb.main)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def load_faq():
    if not hasattr(load_faq, 'cache'):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        with open('../UOGGMKBot/app/faq_data.json', 'r', encoding='utf-8') as file:
            load_faq.cache = json.load(file)
    return load_faq.cache

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def load_faq():
    if not hasattr(load_faq, 'cache'):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        with open('../UOGGMKBot/app/faq_data.json', 'r', encoding='utf-8') as file:
            load_faq.cache = json.load(file)
    return load_faq.cache

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
faq_data = load_faq()

@router.message(F.text == '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì')
async def send_faq(message: types.Message):
    await show_faq(message, 0)

async def show_faq(message: types.Message, question_index: int):
    print(f"Current question index: {question_index}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
        question = faq_data[question_index]["question"]
        answer = faq_data[question_index]["answer"]

        faq_text = f"<b>{question}</b>\n<i>{answer}</i>"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤–ø–µ—Ä–µ–¥ –∏ –Ω–∞–∑–∞–¥
        buttons = [
            [types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'previous_{question_index}')],
            [types.InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data=f'next_{question_index}')]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(faq_text, parse_mode="html", reply_markup=keyboard)

    except IndexError:
        print(f"IndexError: The question index {question_index} is out of range.")
        await message.answer("–û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
    except Exception as e:
        print(f"Error occurred: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@router.callback_query(lambda c: c.data.startswith('previous') or c.data.startswith('next'))
async def navigate_faq(callback_query: types.CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    action, question_index = callback_query.data.split('_')
    question_index = int(question_index)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if action == 'next':
        question_index = (question_index + 1) % len(faq_data)  # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    elif action == 'previous':
        question_index = (question_index - 1) % len(faq_data)  # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ
    await callback_query.message.delete()
    await show_faq(callback_query.message, question_index)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–±–∏—Ç—É—Ä—å–µ–Ω—Ç—É"
@router.message(F.text == '–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º ‚úí')
async def go_back(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'abiturientam'
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=keyb.abiturientam)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
@router.message(F.text == '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ üìã')
async def go_back(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'special'
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("<b>–û—Ç–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:</b>'\n"
                         "5-04-0611-01 ¬´–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤¬ª - ¬´–ü–ú¬ª\n"
                         "5-04-0612-02 ¬´–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º¬ª - ¬´–†–ü¬ª\n\n"
                         "<b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ</b>\n"
                         "5-04-0713-08 ¬´–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ —Å—Ä–µ–¥—Å—Ç–≤ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤¬ª - ¬´–¢–†¬ª\n"
                         "5-04-0715-05 ¬´–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤¬ª -¬´–¢–°¬ª\n\n"
                         "<b>–¢–µ—Ö–Ω–∏–∫–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ</b>\n"
                         "5-04-0714-01 ¬´–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞¬ª - ¬´–¢–ú¬ª\n"
                         "5-04-0311-01 ¬´–ü–ª–∞–Ω–æ–≤–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å¬ª - ¬´–≠–î¬ª\n\n"
                         "<b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ</b>\n"
                         "5-04-0714-04 ¬´–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–ª–ª–æ–≤¬ª - ¬´–ú–ü¬ª\n"
                         "5-04-1033-01 ¬´–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è —á—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π¬ª - ¬´–ü–°¬ª"
                         "\n\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:</b>", reply_markup=keyb.special, parse_mode="html")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_specialities():
    with open('../UOGGMKBot/app/spec.json', 'r', encoding='utf-8') as file:
        return json.load(file)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ
specialities_data = load_specialities()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
async def show_speciality_info(message: Message, speciality_code: str):
    data = specialities_data["specialities"].get(speciality_code)

    if data:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        text = (
            f"<b>{data['title']}</b>\n\n"
            f"<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {data['speciality']}\n\n"
            f"<b>–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:</b> {data['qualification_specialist']}\n\n"
            f"<b>–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ:</b> {data.get('qualification_worker', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n\n"
            f"<b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:</b> {data['duration']}\n\n"
            f"<b>–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è:</b> {data['study_form']}\n\n"
            f"<b>–í–∏–¥–µ–æ:</b> {data['ssilka']}\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await message.answer(
            text,
            reply_markup=keyb.special,
            parse_mode="html"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–ü"
@router.message(F.text == '–ú–ü')
async def go_mp(message: Message):
    await show_speciality_info(message, "MP")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–°"
@router.message(F.text == '–ü–°')
async def go_ps(message: Message):
    await show_speciality_info(message, "PS")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–ú"
@router.message(F.text == '–ü–ú')
async def go_pm(message: Message):
    await show_speciality_info(message, "PM")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–≠–î"
@router.message(F.text == '–≠–î')
async def go_ed(message: Message):
    await show_speciality_info(message, "ED")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–ü"
@router.message(F.text == '–†–ü')
async def go_rp(message: Message):
    await show_speciality_info(message, "RP")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¢–†"
@router.message(F.text == '–¢–†')
async def go_tr(message: Message):
    await show_speciality_info(message, "TR")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¢–ú"
@router.message(F.text == '–¢–ú')
async def go_tm(message: Message):
    await show_speciality_info(message, "TM")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¢–°"
@router.message(F.text == '–¢–°')
async def go_tc(message: Message):
    await show_speciality_info(message, "TC")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ "–ö–∞–∫ –¥–µ–ª–∞?"
@router.message(F.text == '–ö–∞–∫ –¥–µ–ª–∞?')
async def how_are_you(message: Message):
    await message.answer('OK!')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@router.message(F.photo)
async def get_photo_id(message: Message):
    await message.answer(f'ID —Ñ–æ—Ç–æ: {message.photo[-1].file_id}')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /get_photo
@router.message(Command('get_photo'))
async def get_photo(message: Message):
    await message.answer_photo(photo='https://telegram.org/img/t_logo.png',  # –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ
                               caption='–≠—Ç–æ –ª–æ–≥–æ –¢–ì')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è"
@router.message(F.text == '–ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è ‚òé')
async def go_back(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = 'priemnaya'
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("<b>–ì–æ–º–µ–ª—å—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–ª–ª–µ–¥–∂ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ì–æ–º–µ–ª—å, —É–ª. –û–±—ä–µ–∑–¥–Ω–∞—è, 2.\n"
                     "–†–∞–±–æ—Ç–∞–µ–º —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ —Å—É–±–±–æ—Ç—É —Å 9:00 –¥–æ 18:00. –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–ø—Ä–∞–≤–æ–∫: 50-12-73.</b>\n"
                     "\n<b>–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç—ã –ø–æ–¥–∞—é—Ç –≤ –ø—Ä–∏–µ–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n"
                     "1. –ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –∏–º—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∫–æ–ª–ª–µ–¥–∂–∞ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ.\n"
                     "2. –û—Ä–∏–≥–∏–Ω–∞–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫ –Ω–µ–º—É.\n"
                     "3. –ú–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ñ–æ—Ä–º–µ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.\n"
                     "4. –î–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –ø—Ä–∞–≤–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –Ω–∞ –ª—å–≥–æ—Ç—ã –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ.\n"
                     "5. –®–µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–∞–∑–º–µ—Ä–æ–º 3—Ö4 —Å–º.\n"
                     "\n<b>–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è:</b>\n"
                     "1. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –≤—Ä–∞—á–µ–±–Ω–æ-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–π –∏–ª–∏ –º–µ–¥–∏–∫–æ-—Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–π —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (–¥–ª—è –ª–∏—Ü, –∑–∞–∫–æ–Ω—á–∏–≤—à–∏—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –¥–µ—Ç–µ–π-–∏–Ω–≤–∞–ª–∏–¥–æ–≤ –¥–æ 18 –ª–µ—Ç, –∏–Ω–≤–∞–ª–∏–¥–æ–≤ I, II –∏ III –≥—Ä—É–ø–ø—ã).\n"
                     "2. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω–æ-—Ä–∞–∑–≤–∏–≤–∞—é—â–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è –≤ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏—Ö –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è –ª–∏—Ü —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏ –∑—Ä–µ–Ω–∏—è, —Å–ª—É—Ö–∞, —Ñ—É–Ω–∫—Ü–∏–π –æ–ø–æ—Ä–Ω–æ-–¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞).\n"
                     "3. –ü–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ –∑–∞–º–µ–Ω—è—é—â–∏–π –µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–µ–¥—ä—è–≤–ª—è–µ—Ç—Å—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–º –æ—Ç–¥–µ–ª—å–Ω–æ.\n"
                     "\n–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç—ã, –ø–æ—Å—Ç—É–ø–∞—é—â–∏–µ –Ω–∞ –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –æ–±—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –Ω–∞ –¥–Ω–µ–≤–Ω—É—é —Ñ–æ—Ä–º—É –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ –∫–æ–Ω–∫—É—Ä—Å—É —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏.\n"
                     "\n<b>–ò–Ω–æ–≥–æ—Ä–æ–¥–Ω–∏–º —É—á–∞—â–∏–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –æ–±—â–µ–∂–∏—Ç–∏–µ.</b>", reply_markup=keyb.abiturientam, parse_mode="html")
